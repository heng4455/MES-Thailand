import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  ChevronDown, 
  ChevronRight, 
  Package, 
  Building2, 
  Calendar,
  Hash,
  User,
  Phone,
  Mail,
  Settings,
  Cog
} from 'lucide-react';
import { customersAPI, productsAPI, supabase } from '../utils/supabase';

const ProductHierarchy = () => {
  const { t } = useTranslation();
  const [loading, setLoading] = useState(true);
  const [expandedProducts, setExpandedProducts] = useState({});
  const [expandedCustomers, setExpandedCustomers] = useState({});
  const [hierarchyData, setHierarchyData] = useState([]);

  useEffect(() => {
    loadHierarchyData();
  }, []);

  const loadHierarchyData = async () => {
    try {
      setLoading(true);
      
      // Ï†úÌíàÍ≥º Í≥†Í∞ù Îç∞Ïù¥ÌÑ∞ Î≥ëÎ†¨ Î°úÎìú
      const [productsResult, customersResult] = await Promise.all([
        productsAPI.getAll(),
        customersAPI.getAll()
      ]);

      if (productsResult.success && customersResult.success) {
        const products = productsResult.data;
        const customers = customersResult.data;

        // Ï†úÌíàÎ≥ÑÎ°ú Í≥†Í∞ù Ï†ïÎ≥¥Î•º Í∑∏Î£πÌôîÌïòÍ≥† Ïó∞Í≤∞Îêú Í≥µÏ†ïÎèÑ Î°úÎìú
        const productHierarchy = await Promise.all(products.map(async (product) => {
          // Ìï¥Îãπ Ï†úÌíàÏùÑ Ï£ºÎ¨∏Ìïú Í≥†Í∞ùÎì§ Ï∞æÍ∏∞
          const relatedCustomers = customers.filter(customer => 
            product.client === customer.customer_name || 
            product.client === customer.company_name
          );

          // Í≥†Í∞ù Ï†ïÎ≥¥Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ Ï†úÌíàÏùò client Ï†ïÎ≥¥Î°ú Í∏∞Î≥∏ Í≥†Í∞ù Í∞ùÏ≤¥ ÏÉùÏÑ±
          let customersWithDetails = relatedCustomers;
          if (relatedCustomers.length === 0 && product.client) {
            customersWithDetails = [{
              id: `client-${product.client}`,
              customer_name: product.client,
              company_name: product.client,
              contact_person: 'N/A',
              email: 'N/A',
              phone: 'N/A',
              created_at: product.created_at,
              isPlaceholder: true
            }];
          }

          // Ìï¥Îãπ Ï†úÌíàÍ≥º Ïó∞Í≤∞Îêú Í≥µÏ†ïÎì§ Ï°∞Ìöå
          let connectedProcesses = [];
          try {
            console.log(`üîç Ï†úÌíà ${product.product_code}Ïùò Ïó∞Í≤∞Îêú Í≥µÏ†ï Ï°∞Ìöå ÏãúÏûë...`);
            
            // Î∞©Î≤ï 1: descriptionÏóêÏÑú Ï†úÌíà ÏΩîÎìúÎ°ú Îß§Ïπ≠ (Í∏∞Ï°¥ Î∞©Ïãù)
            const { data: processData1 } = await supabase
              .from('work_centers')
              .select('id, name, code, location, status, description')
              .ilike('description', `%${product.product_code}%`);
            
            console.log(`Î∞©Î≤ï 1 - description Îß§Ïπ≠ Í≤∞Í≥º:`, processData1?.length || 0, 'Í∞ú');
            
            // Î∞©Î≤ï 2: process_routesÏôÄ process_stepsÎ•º ÌÜµÌïú Îß§Ïπ≠
            const { data: processData2 } = await supabase
              .from('process_steps')
              .select(`
                work_center_id,
                work_centers!inner(
                  id, name, code, location, status, description
                ),
                process_routes!inner(
                  product_id,
                  products!inner(
                    product_code
                  )
                )
              `)
              .eq('process_routes.products.product_code', product.product_code);
            
            console.log(`Î∞©Î≤ï 2 - process_routes/steps Îß§Ïπ≠ Í≤∞Í≥º:`, processData2?.length || 0, 'Í∞ú');
            
            // Î∞©Î≤ï 3: work_centersÏóêÏÑú ÏßÅÏ†ë Ï†úÌíà ÏΩîÎìúÍ∞Ä Ìè¨Ìï®Îêú Î™®Îì† ÌïÑÎìú Í≤ÄÏÉâ
            const { data: processData3 } = await supabase
              .from('work_centers')
              .select('id, name, code, location, status, description')
              .or(`name.ilike.%${product.product_code}%,code.ilike.%${product.product_code}%,description.ilike.%${product.product_code}%`);
            
            console.log(`Î∞©Î≤ï 3 - Ï†ÑÏ≤¥ ÌïÑÎìú Îß§Ïπ≠ Í≤∞Í≥º:`, processData3?.length || 0, 'Í∞ú');
            
            // Î™®Îì† Í≤∞Í≥ºÎ•º Ìï©ÏπòÍ≥† Ï§ëÎ≥µ Ï†úÍ±∞
            const allProcesses = new Map();
            
            // Î∞©Î≤ï 1 Í≤∞Í≥º Ï∂îÍ∞Ä
            if (processData1) {
              processData1.forEach(process => {
                allProcesses.set(process.id, {
                  id: process.id,
                  name: process.name,
                  code: process.code,
                  processType: process.location || 'ÏùºÎ∞ò',
                  status: process.status || 'active',
                  description: process.description,
                  matchMethod: 'description'
                });
              });
            }
            
            // Î∞©Î≤ï 2 Í≤∞Í≥º Ï∂îÍ∞Ä
            if (processData2) {
              processData2.forEach(item => {
                const process = item.work_centers;
                allProcesses.set(process.id, {
                  id: process.id,
                  name: process.name,
                  code: process.code,
                  processType: process.location || 'ÏùºÎ∞ò',
                  status: process.status || 'active',
                  description: process.description,
                  matchMethod: 'process_routes'
                });
              });
            }
            
            // Î∞©Î≤ï 3 Í≤∞Í≥º Ï∂îÍ∞Ä
            if (processData3) {
              processData3.forEach(process => {
                if (!allProcesses.has(process.id)) {
                  allProcesses.set(process.id, {
                    id: process.id,
                    name: process.name,
                    code: process.code,
                    processType: process.location || 'ÏùºÎ∞ò',
                    status: process.status || 'active',
                    description: process.description,
                    matchMethod: 'field_search'
                  });
                }
              });
            }
            
            connectedProcesses = Array.from(allProcesses.values());
            console.log(`‚úÖ ÏµúÏ¢Ö Í≥µÏ†ï Ïàò: ${connectedProcesses.length}Í∞ú`);
            
            if (connectedProcesses.length > 0) {
              console.log('Î∞úÍ≤¨Îêú Í≥µÏ†ïÎì§:', connectedProcesses.map(p => `${p.name} (${p.code}) - Îß§Ïπ≠Î∞©Î≤ï: ${p.matchMethod}`));
            }
            
          } catch (error) {
            console.warn(`Ï†úÌíà ${product.product_code}Ïùò Í≥µÏ†ï Ï°∞Ìöå Ïã§Ìå®:`, error);
          }

          return {
            ...product,
            customers: customersWithDetails,
            customerCount: customersWithDetails.length,
            totalOrders: customersWithDetails.length,
            connectedProcesses: connectedProcesses,
            processCount: connectedProcesses.length
          };
        }));

        // Ï†úÌíàÏùÑ Í≥†Í∞ù ÏàòÍ∞Ä ÎßéÏùÄ ÏàúÏúºÎ°ú Ï†ïÎ†¨
        productHierarchy.sort((a, b) => b.customerCount - a.customerCount);

        setHierarchyData(productHierarchy);
      }
    } catch (error) {
      console.error('Ï†úÌíà Í≥ÑÏ∏µ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', error);
    } finally {
      setLoading(false);
    }
  };

  const toggleProduct = (productId) => {
    setExpandedProducts(prev => ({
      ...prev,
      [productId]: !prev[productId]
    }));
  };

  const toggleCustomer = (customerId) => {
    setExpandedCustomers(prev => ({
      ...prev,
      [customerId]: !prev[customerId]
    }));
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('ko-KR');
  };

  const getProductTypeColor = (productCode) => {
    if (productCode?.includes('CMMP')) return 'bg-blue-100 text-blue-800';
    if (productCode?.includes('CMMPF')) return 'bg-green-100 text-green-800';
    if (productCode?.includes('BS')) return 'bg-purple-100 text-purple-800';
    if (productCode?.includes('SB')) return 'bg-orange-100 text-orange-800';
    return 'bg-gray-100 text-gray-800';
  };

  if (loading) {
    return (
      <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
        <div className="animate-pulse">
          <div className="flex items-center justify-between mb-4">
            <div className="h-6 bg-gray-200 rounded w-32"></div>
            <div className="h-4 bg-gray-200 rounded w-16"></div>
          </div>
          <div className="space-y-3">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="h-12 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-2">
          <Package className="w-5 h-5 text-green-600" />
          <h2 className="text-xl font-bold text-gray-900">{t('hierarchical.productView')}</h2>
        </div>
        <div className="text-sm text-gray-500">
          Ï¥ù Ï†úÌíà Ïàò: <span className="font-medium text-green-600">{hierarchyData.length}Í∞ú</span>
        </div>
      </div>
      
      <p className="text-sm text-gray-600 mb-4">{t('hierarchical.productDescription')}</p>

      <div className="space-y-2 max-h-96 overflow-y-auto">
        {hierarchyData.map((product) => (
          <div key={product.id} className="border border-gray-200 rounded-lg">
            {/* Ï†úÌíà Î†àÎ≤® */}
            <div 
              className="p-4 cursor-pointer hover:bg-gray-50 transition-colors"
              onClick={() => toggleProduct(product.id)}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  {expandedProducts[product.id] ? 
                    <ChevronDown className="w-4 h-4 text-gray-400" /> : 
                    <ChevronRight className="w-4 h-4 text-gray-400" />
                  }
                  <Package className="w-5 h-5 text-green-600" />
                  <div>
                    <div className="flex items-center space-x-2">
                      <div className="font-semibold text-gray-900">{product.product_code}</div>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getProductTypeColor(product.product_code)}`}>
                        {product.product_code?.includes('CMMP') ? 'CMMP ÏãúÎ¶¨Ï¶à' :
                         product.product_code?.includes('CMMPF') ? 'CMMPF ÏãúÎ¶¨Ï¶à' : 'Í∏∞ÌÉÄ'}
                      </span>
                    </div>
                    <div className="text-sm text-gray-500">{product.product_name}</div>
                  </div>
                </div>
                <div className="flex items-center space-x-4 text-sm text-gray-500">
                  <div className="flex items-center space-x-1">
                    <Hash className="w-4 h-4" />
                    <span>{product.quantity || 0}Í∞ú</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Building2 className="w-4 h-4" />
                    <span>{product.customerCount}Í∞ú Í≥†Í∞ù</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Settings className="w-4 h-4" />
                    <span>{product.processCount}Í∞ú Í≥µÏ†ï</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Calendar className="w-4 h-4" />
                    <span>{formatDate(product.created_at)}</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Í≥†Í∞ù Î†àÎ≤® */}
            {expandedProducts[product.id] && (
              <div className="border-t border-gray-100 bg-gray-50">
                {product.customers.length > 0 ? (
                  product.customers.map((customer) => (
                    <div key={customer.id} className="border-b border-gray-100 last:border-b-0">
                      {/* Í≥†Í∞ù Ï†ïÎ≥¥ */}
                      <div 
                        className="p-4 pl-12 cursor-pointer hover:bg-gray-100 transition-colors"
                        onClick={() => toggleCustomer(customer.id)}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-3">
                            {expandedCustomers[customer.id] ? 
                              <ChevronDown className="w-4 h-4 text-gray-400" /> : 
                              <ChevronRight className="w-4 h-4 text-gray-400" />
                            }
                            <Building2 className="w-4 h-4 text-blue-600" />
                            <div>
                              <div className="font-medium text-gray-900">{customer.customer_name}</div>
                              <div className="text-sm text-gray-500">{customer.company_name}</div>
                              {customer.isPlaceholder && (
                                <div className="text-xs text-orange-600">* Í≥†Í∞ù Ï†ïÎ≥¥ ÎØ∏Îì±Î°ù</div>
                              )}
                            </div>
                          </div>
                          <div className="flex items-center space-x-6 text-sm text-gray-500">
                            <div className="flex items-center space-x-1">
                              <User className="w-4 h-4" />
                              <span>{customer.contact_person || 'N/A'}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Settings className="w-4 h-4" />
                              <span>{product.processCount}Í∞ú Í≥µÏ†ï</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Calendar className="w-4 h-4" />
                              <span>{formatDate(customer.created_at)}</span>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Í≥†Í∞ùÎ≥Ñ ÏÑ∏Î∂Ä Ï†ïÎ≥¥ (ÌôïÏû•Ïãú) */}
                      {expandedCustomers[customer.id] && (
                        <div className="bg-white border-t border-gray-100">
                          {/* Ï£ºÎ¨∏ Ï†ïÎ≥¥ */}
                          <div className="p-4 pl-16">
                            <div className="bg-gray-50 rounded-lg p-3 border border-gray-200 mb-4">
                              <h4 className="text-sm font-medium text-gray-700 mb-2">Ï£ºÎ¨∏ Ï†ïÎ≥¥</h4>
                              <div className="flex items-center justify-between">
                                <div className="flex items-center space-x-4">
                                  <div className="text-sm">
                                    <span className="text-gray-500">Ï£ºÎ¨∏ ÏàòÎüâ:</span>
                                    <span className="font-medium text-gray-900 ml-1">{product.quantity || 0}Í∞ú</span>
                                  </div>
                                  <div className="text-sm">
                                    <span className="text-gray-500">Îã®ÏúÑ:</span>
                                    <span className="font-medium text-gray-900 ml-1">{product.unit || 'Í∞ú'}</span>
                                  </div>
                                  <div className="text-sm">
                                    <span className="text-gray-500">ÏÉÅÌÉú:</span>
                                    <span className={`ml-1 px-2 py-1 rounded-full text-xs font-medium ${
                                      product.order_status === 'completed' ? 'bg-green-100 text-green-600' :
                                      product.order_status === 'processing' ? 'bg-blue-100 text-blue-600' :
                                      product.order_status === 'pending' ? 'bg-yellow-100 text-yellow-600' :
                                      'bg-gray-100 text-gray-600'
                                    }`}>
                                      {product.order_status === 'completed' ? 'ÏôÑÎ£å' :
                                       product.order_status === 'processing' ? 'ÏßÑÌñâÏ§ë' :
                                       product.order_status === 'pending' ? 'ÎåÄÍ∏∞' :
                                       product.order_status === 'shipped' ? 'Ï∂úÍ≥†' : 'ÎØ∏Ï†ï'}
                                    </span>
                                  </div>
                                </div>
                                <div className="text-sm text-gray-500">
                                  Ï£ºÎ¨∏Ïùº: {formatDate(product.created_at)}
                                </div>
                              </div>
                            </div>

                            {/* Ïó∞Í≤∞Îêú Í≥µÏ†ï Î™©Î°ù */}
                            <div className="bg-blue-50 rounded-lg p-3 border border-blue-200">
                              <h4 className="text-sm font-medium text-blue-700 mb-2 flex items-center">
                                <Cog className="w-4 h-4 mr-1" />
                                Ïó∞Í≤∞Îêú Í≥µÏ†ï ({product.processCount}Í∞ú)
                              </h4>
                              {product.connectedProcesses && product.connectedProcesses.length > 0 ? (
                                <div className="space-y-2">
                                  {product.connectedProcesses.map((process) => (
                                    <div key={process.id} className="bg-white rounded p-2 border border-blue-100">
                                      <div className="flex items-center justify-between">
                                        <div className="flex items-center space-x-2">
                                          <Cog className="w-4 h-4 text-blue-600" />
                                          <div>
                                            <div className="font-medium text-gray-900">{process.name}</div>
                                            <div className="text-xs text-gray-500">{process.code}</div>
                                          </div>
                                        </div>
                                        <div className="flex items-center space-x-3 text-xs text-gray-500">
                                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                            process.processType === 'Ï†àÏÇ≠' ? 'bg-red-100 text-red-600' :
                                            process.processType === 'Ï°∞Î¶Ω' ? 'bg-green-100 text-green-600' :
                                            process.processType === 'Í≤ÄÏÇ¨' ? 'bg-purple-100 text-purple-600' :
                                            'bg-gray-100 text-gray-600'
                                          }`}>
                                            {process.processType}
                                          </span>
                                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                            process.status === 'active' ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-600'
                                          }`}>
                                            {process.status === 'active' ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±'}
                                          </span>
                                        </div>
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              ) : (
                                <div className="text-sm text-blue-600">Ïó∞Í≤∞Îêú Í≥µÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§.</div>
                              )}
                            </div>

                            {/* Í≥†Í∞ù Ïó∞ÎùΩÏ≤ò Ï†ïÎ≥¥ */}
                            <div className="mt-4 bg-gray-50 rounded-lg p-3 border border-gray-200">
                              <h4 className="text-sm font-medium text-gray-700 mb-2">Ïó∞ÎùΩÏ≤ò Ï†ïÎ≥¥</h4>
                              <div className="grid grid-cols-2 gap-4 text-sm">
                                <div className="flex items-center space-x-1">
                                  <Mail className="w-4 h-4 text-gray-400" />
                                  <span className="text-gray-600">Ïù¥Î©îÏùº:</span>
                                  <span className="text-gray-900">{customer.email || 'N/A'}</span>
                                </div>
                                <div className="flex items-center space-x-1">
                                  <Phone className="w-4 h-4 text-gray-400" />
                                  <span className="text-gray-600">Ï†ÑÌôî:</span>
                                  <span className="text-gray-900">{customer.phone || 'N/A'}</span>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  ))
                ) : (
                  <div className="p-4 pl-12 text-sm text-gray-500">
                    Ï£ºÎ¨∏ Í≥†Í∞ùÏù¥ ÏóÜÏäµÎãàÎã§.
                  </div>
                )}
              </div>
            )}
          </div>
        ))}
      </div>

      {hierarchyData.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          Îì±Î°ùÎêú Ï†úÌíàÏù¥ ÏóÜÏäµÎãàÎã§.
        </div>
      )}
    </div>
  );
};

export default ProductHierarchy; 